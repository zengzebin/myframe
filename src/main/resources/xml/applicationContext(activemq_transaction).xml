<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"

    xmlns:amq="http://activemq.apache.org/schema/core"
    xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/data/jpa 
	http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://www.springframework.org/schema/task  
	http://www.springframework.org/schema/task/spring-task-3.1.xsd 
    http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms-3.1.xsd
    http://activemq.apache.org/schema/core
    http://activemq.apache.org/schema/core/activemq-core-5.14.1.xsd
   ">


	<!-- 这一步就完成了@AspectJ的支持，从而可以实现通过注解方式将通知编织到非公共方法中。 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<context:component-scan base-package="common.aop" />
     <context:component-scan base-package="activemq.service" />
	<task:annotation-driven />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<context:component-scan base-package="ssxt.com.zeng.dao" />
	<context:component-scan base-package="ssxt.com.zeng.service" />
	<context:component-scan base-package="common.dao" />
	<context:component-scan base-package="common.service" />

	<context:component-scan base-package="common.util" />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />




	<!-- 数据库 -->
	<bean class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close" id="tmsDataSource">

		<property name="uniqueResourceName">
			<value>mysql/tms</value>
		</property>

		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
				<prop key="url">${jdbc.url}</prop>
			</props>
		</property>

		<property name="poolSize" value="3" />
		<property name="minPoolSize" value="3" />
		<property name="maxPoolSize" value="50" />

		<property name="reapTimeout">
			<value>20000</value>
		</property>
	</bean>

 






	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="tmsDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext
				</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.autocommit}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- 是否格式化sql -->
				<prop key="hibernate.format_sql">false</prop>
				<!-- 是否使用注释 -->
				<!-- <prop key="hibernate.use_sql_comments">${hibernate.show_sql}</prop> -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解 <property name="packagesToScan"> <list> <value>com.ssxt.rdbox.web.core.model</value> 
			</list> </property> -->
		<!-- 配置文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/ssxt/com/zeng/xml</value>
			</list>
		</property>
	</bean>

   <!-- atomikos事务管理器 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<description>UserTransactionManager</description>
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>

	<!-- spring 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
		<property name="allowCustomIsolationLevels" value="true" />
	</bean>


	<!-- hibernate Dao层模板 -->
	  <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>  
   


	<!-- 使用annotation定义事务，对于要加入事物的类，只需对该类加 @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
     <!-- 点对点定义消息队列（Queue） -->
	<bean id="demoQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg>
			<value>gzframe.demo</value>
		</constructor-arg>
	</bean>
	
	
	
    <bean id="amqConnectionFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory" >  
        <property name="brokerURL" value="tcp://localhost:61616"/>  
    </bean>   
	     
         
    
    
    <!--  <amq:connectionFactory id="amqConnectionFactory"
		brokerURL="tcp://localhost:61616" userName="admin" password="admin" />   -->
	
	
	 <bean id="atomikosConnectionFactory"  
          class="com.atomikos.jms.AtomikosConnectionFactoryBean" init-method="init" destroy-method="close">  
        <property name="uniqueResourceName" value="amq1"/>  
        <property name="xaConnectionFactory" ref="amqConnectionFactory"/>  
        <property name="poolSize" value="100"/>
    </bean>  
	
	
	  <!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	 <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
       <property name="connectionFactory" ref="atomikosConnectionFactory"/>  
       <property name="defaultDestination" ref="demoQueueDestination"/>  
       <property name="receiveTimeout" value="10000"/>  
        <!-- true是topic，false是queue，默认是false，此处显示写出false -->
		<property name="pubSubDomain" value="false" />
      </bean>  
        
     <bean id="queueMessageListener" class="activemq.service.QueueMessageListener" /> 
     
     <!-- 显示注入消息监听容器（Queue），配置连接工厂，监听的目标是demoQueueDestination，监听器是上面定义的监听器 -->
   <!--   <bean id="queueListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="atomikosConnectionFactory" />
		<property name="destination" ref="demoQueueDestination" />
		<property name="messageListener" ref="queueMessageListener" />
		<property name="concurrency" value="1"></property> 
	    <property name="transactionManager" ref="transactionManager"/>   
	</bean>      -->    
 
</beans>
