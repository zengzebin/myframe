<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/data/jpa 
	http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://www.springframework.org/schema/task  
	http://www.springframework.org/schema/task/spring-task-3.1.xsd 
	">
	
	
	<!-- 这一步就完成了@AspectJ的支持，从而可以实现通过注解方式将通知编织到非公共方法中。 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
<context:component-scan base-package="common.aop" /> 

	<task:annotation-driven />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<context:component-scan base-package="ssxt.com.zeng.dao" />
	<context:component-scan base-package="ssxt.com.zeng.service" />
	<context:component-scan base-package="common.dao" />
	<context:component-scan base-package="common.service" />

	<context:component-scan base-package="common.util" />

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource" p:lobHandler-ref="lobHandler">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext
				</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.autocommit}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				  <prop key="hibernate.hbm2ddl.auto">create</prop>  
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- 是否格式化sql -->
				<prop key="hibernate.format_sql">false</prop>
				<!-- 是否使用注释 -->
				<!-- <prop key="hibernate.use_sql_comments">${hibernate.show_sql}</prop> -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解 <property name="packagesToScan"> <list> <value>com.ssxt.rdbox.web.core.model</value> 
			</list> </property> -->
		<!-- 配置文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/ssxt/com/zeng/xml</value>
			</list>
		</property>
	</bean>



	<!-- 配置数据源 -->
	<bean id="dataSourceBack" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 自动重连配置 <property name="maxIdle" value="30" /> <property name="minIdle" 
			value="2" /> -->
		<!-- 连接被泄露时是否打印 <property name="logAbandoned" value="true"/> -->
		<!--removeAbandoned: 是否自动回收超时连接 <property name="removeAbandoned" value="true"/> -->
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) <property name="removeAbandonedTimeout" 
			value="10"/> -->
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 <property name="maxWait" value="1000"/> -->
		<property name="testWhileIdle">
			<value>true</value>
		</property>
		<property name="testOnBorrow">
			<value>true</value>
		</property>
		<!--<property name="testOnReturn" ><value>false</value></property> -->
		<property name="validationQuery">
			<value>select 1</value>
		</property>



		<!-- 定时删除连接，解决数据库连接不稳定的问题 -->
		<!-- timeBetweenEvictionRunsMillis -1 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程 
			numTestsPerEvictionRun 3 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 minEvictableIdleTimeMillis 
			1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>3600000</value>
		</property>
		<property name="minEvictableIdleTimeMillis">
			<value>18000000</value>
		</property>
		<!--<property name="numTestsPerEvictionRun" ><value>5</value></property> 
			<property name="minEvictableIdleTimeMillis" ><value>300000</value></property> -->

	</bean>
	
	
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="maxActive" value="50" />
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="100" />

		<!-- 配置监控统计拦截的filters -->
  		<property name="filters" value="stat" /> 
  		<!-- http://localhost:8080/myframe/druid/  -->
<!-- 		<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" /> -->
	</bean>
	
	
	

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置Hibernate事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 声明使用注解式事务,在相应的方法上使用@Transactional声明启用事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="txManager" />

	<!-- 名称可以自定义统一异常处理
	<bean id="exceptionHandler" class="common.exception.MyExceptionHandler" />
 -->


<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="ehcacheManager"/>
    
    <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
    <bean id="ehcacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
         <property name="configLocation" value="classpath:ehcache.xml" />
    </bean>
    <!-- 声明cacheManager -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
         <property name="cacheManager" ref="ehcacheManagerFactory" />
        
<!--    <property name="transactionAware" value="true"/>      此处的transactionAware表示是否事务环绕的，如果true，则如果事务回滚，缓存也回滚，默认false。 --> 
   </bean>



</beans>
