<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/data/jpa 
	http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://www.springframework.org/schema/task  
	http://www.springframework.org/schema/task/spring-task-3.1.xsd 
	http://www.springframework.org/schema/jms
    http://www.springframework.org/schema/jms/spring-jms-3.1.xsd
    http://activemq.apache.org/schema/core
    http://activemq.apache.org/schema/core/activemq-core-5.14.1.xsd">


	<!-- 这一步就完成了@AspectJ的支持，从而可以实现通过注解方式将通知编织到非公共方法中。 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />



	<task:annotation-driven />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<context:component-scan base-package="ssxt.com.zeng.dao" />
	<context:component-scan base-package="ssxt.com.zeng.service" />
	<context:component-scan base-package="common.dao" />
	<context:component-scan base-package="common.service" />
	<context:component-scan base-package="activemq.service" />
	<context:component-scan base-package="common.util" />


	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource" p:lobHandler-ref="lobHandler">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext
				</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.autocommit}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- 是否格式化sql -->
				<prop key="hibernate.format_sql">false</prop>
				<!-- 是否使用注释 -->
				<!-- <prop key="hibernate.use_sql_comments">${hibernate.show_sql}</prop> -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解 <property name="packagesToScan"> <list> <value>com.ssxt.rdbox.web.core.model</value> 
			</list> </property> -->
		<!-- 配置文件 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/ssxt/com/zeng/xml</value>
			</list>
		</property>
	</bean>




	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="maxActive" value="50" />
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="100" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		<!-- http://localhost:8080/myframe/druid/ -->
		<!-- <property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" 
			/> -->
	</bean>




	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置Hibernate事务管理器 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 声明使用注解式事务,在相应的方法上使用@Transactional声明启用事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="txManager" />

	<!-- 名称可以自定义统一异常处理 -->
	<bean id="exceptionHandler" class="common.exception.MyExceptionHandler" />


	<amq:connectionFactory id="amqConnectionFactory"
		brokerURL="tcp://localhost:61616" userName="admin" password="admin" />


	<!-- 配置JMS连接工长 -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<constructor-arg ref="amqConnectionFactory" />
		<property name="sessionCacheSize" value="100" />
		<!-- 消息传输监听器 处理网络及服务器异常 -->
		<!-- <property name="transportListener"> <bean class="activemq.service.ActiveMQTransportListener" 
			/> </property> -->
	</bean>

	<!-- 点对点定义消息队列（Queue） -->
	<bean id="demoQueueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg>
			<value>gzframe.demo</value>
		</constructor-arg>
	</bean>

	<!--这个是主题目的地，一对多的 <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic"> 
		<constructor-arg value="topic"/> </bean> -->



	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="demoQueueDestination" />
		<property name="receiveTimeout" value="10000" />
		<!-- true是topic，false是queue，默认是false，此处显示写出false -->
		<property name="pubSubDomain" value="false" />
	</bean>
 

	<bean id="queueMessageListener" class="activemq.service.QueueMessageListener" />
	<!-- 显示注入消息监听容器（Queue），配置连接工厂，监听的目标是demoQueueDestination，监听器是上面定义的监听器 -->
	<!-- <bean id="queueListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="demoQueueDestination" />
		<property name="messageListener" ref="queueMessageListener" />
		<property name="concurrency" value="1"></property>线程数量1-5
	     <property name="sessionTransacted" value="true"/>   开启事务默认flase
	</bean> -->
	
	
	
	
	
 

</beans>
